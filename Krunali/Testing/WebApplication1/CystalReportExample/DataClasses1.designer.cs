#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CystalReportExample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Collage Master")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCountry_Master(Country_Master instance);
    partial void UpdateCountry_Master(Country_Master instance);
    partial void DeleteCountry_Master(Country_Master instance);
    partial void InsertDistrict_Master(District_Master instance);
    partial void UpdateDistrict_Master(District_Master instance);
    partial void DeleteDistrict_Master(District_Master instance);
    partial void InsertState_Master(State_Master instance);
    partial void UpdateState_Master(State_Master instance);
    partial void DeleteState_Master(State_Master instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Collage_MasterConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Country_Master> Country_Masters
		{
			get
			{
				return this.GetTable<Country_Master>();
			}
		}
		
		public System.Data.Linq.Table<District_Master> District_Masters
		{
			get
			{
				return this.GetTable<District_Master>();
			}
		}
		
		public System.Data.Linq.Table<State_Master> State_Masters
		{
			get
			{
				return this.GetTable<State_Master>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountrySelectAll")]
		public ISingleResult<CountrySelectAllResult> CountrySelectAll()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<CountrySelectAllResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country_Master")]
	public partial class Country_Master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _Country;
		
		private EntitySet<District_Master> _District_Masters;
		
		private EntitySet<State_Master> _State_Masters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Country_Master()
		{
			this._District_Masters = new EntitySet<District_Master>(new Action<District_Master>(this.attach_District_Masters), new Action<District_Master>(this.detach_District_Masters));
			this._State_Masters = new EntitySet<State_Master>(new Action<State_Master>(this.attach_State_Masters), new Action<State_Master>(this.detach_State_Masters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Master_District_Master", Storage="_District_Masters", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<District_Master> District_Masters
		{
			get
			{
				return this._District_Masters;
			}
			set
			{
				this._District_Masters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Master_State_Master", Storage="_State_Masters", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<State_Master> State_Masters
		{
			get
			{
				return this._State_Masters;
			}
			set
			{
				this._State_Masters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_District_Masters(District_Master entity)
		{
			this.SendPropertyChanging();
			entity.Country_Master = this;
		}
		
		private void detach_District_Masters(District_Master entity)
		{
			this.SendPropertyChanging();
			entity.Country_Master = null;
		}
		
		private void attach_State_Masters(State_Master entity)
		{
			this.SendPropertyChanging();
			entity.Country_Master = this;
		}
		
		private void detach_State_Masters(State_Master entity)
		{
			this.SendPropertyChanging();
			entity.Country_Master = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.District_Master")]
	public partial class District_Master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DistrictId;
		
		private int _CountryId;
		
		private int _StateId;
		
		private string _District;
		
		private EntityRef<Country_Master> _Country_Master;
		
		private EntityRef<State_Master> _State_Master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDistrictIdChanging(int value);
    partial void OnDistrictIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    #endregion
		
		public District_Master()
		{
			this._Country_Master = default(EntityRef<Country_Master>);
			this._State_Master = default(EntityRef<State_Master>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DistrictId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DistrictId
		{
			get
			{
				return this._DistrictId;
			}
			set
			{
				if ((this._DistrictId != value))
				{
					this.OnDistrictIdChanging(value);
					this.SendPropertyChanging();
					this._DistrictId = value;
					this.SendPropertyChanged("DistrictId");
					this.OnDistrictIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country_Master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL")]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State_Master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Master_District_Master", Storage="_Country_Master", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public Country_Master Country_Master
		{
			get
			{
				return this._Country_Master.Entity;
			}
			set
			{
				Country_Master previousValue = this._Country_Master.Entity;
				if (((previousValue != value) 
							|| (this._Country_Master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country_Master.Entity = null;
						previousValue.District_Masters.Remove(this);
					}
					this._Country_Master.Entity = value;
					if ((value != null))
					{
						value.District_Masters.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country_Master");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Master_District_Master", Storage="_State_Master", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public State_Master State_Master
		{
			get
			{
				return this._State_Master.Entity;
			}
			set
			{
				State_Master previousValue = this._State_Master.Entity;
				if (((previousValue != value) 
							|| (this._State_Master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State_Master.Entity = null;
						previousValue.District_Masters.Remove(this);
					}
					this._State_Master.Entity = value;
					if ((value != null))
					{
						value.District_Masters.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("State_Master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.State_Master")]
	public partial class State_Master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateId;
		
		private int _CountryId;
		
		private string _State;
		
		private EntitySet<District_Master> _District_Masters;
		
		private EntityRef<Country_Master> _Country_Master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public State_Master()
		{
			this._District_Masters = new EntitySet<District_Master>(new Action<District_Master>(this.attach_District_Masters), new Action<District_Master>(this.detach_District_Masters));
			this._Country_Master = default(EntityRef<Country_Master>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country_Master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(100)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_Master_District_Master", Storage="_District_Masters", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<District_Master> District_Masters
		{
			get
			{
				return this._District_Masters;
			}
			set
			{
				this._District_Masters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Master_State_Master", Storage="_Country_Master", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public Country_Master Country_Master
		{
			get
			{
				return this._Country_Master.Entity;
			}
			set
			{
				Country_Master previousValue = this._Country_Master.Entity;
				if (((previousValue != value) 
							|| (this._Country_Master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country_Master.Entity = null;
						previousValue.State_Masters.Remove(this);
					}
					this._Country_Master.Entity = value;
					if ((value != null))
					{
						value.State_Masters.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("Country_Master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_District_Masters(District_Master entity)
		{
			this.SendPropertyChanging();
			entity.State_Master = this;
		}
		
		private void detach_District_Masters(District_Master entity)
		{
			this.SendPropertyChanging();
			entity.State_Master = null;
		}
	}
	
	public partial class CountrySelectAllResult
	{
		
		private string _Country;
		
		public CountrySelectAllResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this._Country = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
